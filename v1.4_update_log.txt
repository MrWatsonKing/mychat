v1.4_update_log on:mychat by:Mr.King @20180613

发现问题和解决方案

1.command:online及chatroom中:online及server:online查看在线用户列表时，0个用户时客户端不能退出功能函数而阻塞卡死，以及用户数量不为0时收到的用户名列表包含不应包含的字符的问题
问题原因：
	a.0个用户时，服务端会在发送完用户人数消息之后立即退出该函数，而退出之前额外发出的会话结束标志，因为相隔的时间太短，而被客户端的第一次read()函数一次性同时读到了sizebuf当中，所以结束标志并没有进入接下来的循环消息接收中成为循环退出的判断条件，而此时客户端的反而因为收不到任何消息而阻塞在接收循环，导致程序卡死。
	b.用户数量不为0时，服务器在发送完最后一部分在线用户列表片段之后，紧接着会发出一个结束标志，同样因为时间太短，而被客户端中的消息接收循环连同上一条消息一次性接收，从而导致两条需要独立解析的会话语句合并成了一句语句，此时客户端的处理函数不能正确的解析混合的消息，从而将不应该输出的语句头server:@. 也输出了出来，成为了“乱码”。
	c.这两个问题的本质是一样的，都是相邻操作区间内，连续快速向套接字输出信息，导致套接字接收端将多次独立消息合为一次消息，从而产生错误的解析结果。
解决办法：
	a.找到了问题原因，问题就解决了百分之九十。首先修改服务端中0人在线情况的输出语句，不再造成连续发送的可能性，而直接按分支处理，每一个分支都一次性输出所有的相关信息。然后修改对应的客户端的代码，因为可以一次性收到所有的消息，则可以直接按照在线人数进行分支处理，0人时输出0人在线语句，然后直接退出函数，就再也不会因为收不到结束标志而阻塞卡死。
	b.当用户数量不为0时，服务器在输出了最后一个在线用户列表片段之后，不再单独向套接字输出结束标志，而是直接将结束标志附加在最后一段用户列表片段的末尾，这样可以保证用户列表片段和结束标志中间不会再存在消息头，从而彻底杜绝了客户端将两句独立消息混合在一起之后再进行错误解析的可能性，消息头就不会再进入客户端的printf()输出语句中成为乱码。
	c.上面两个解决办法的本质也是一致的，都是将结束语句直接附加在最后一条有效消息当中，不允许在相邻的操作区间内连续、快速的向套接字输出消息，这样套接字接收端收到的每一个语句都可以是独立的，也就确保消息可以得到正确的解析。


2.在command:栏和chatroom中,查看在线共享文件列表的问题
解决办法：
	a.服务器创建遍历本地文件夹并获取文件信息的功能函数pcheckfiles()，如果传入参数cfd<=0，则可以直接在服务器本地使用，通过服务器运行界面输入:shares可以直接展示存储在服务器本地共享文件夹中的共享文件名列表。
	b.客户端建立对应的功能函数pcheckfiles()，在command:shares命令时，调用该函数;在聊天过程中，输入:shares回车，服务器将接收到检查在线文件列表的命令，向客户端发送文件列表，但此时是通过talk函数的接收线程来进行输出，而并没有调用pcheckfiles().
	c.经过以上改进和融合之后，可以同时在服务器界面、客户端command界面、客户端聊天界面分别进行共享文件检查，比较好的解决了查看文件列表的问题.


3.服务器没有帮助提示的问题
解决办法：
	添加:help命令支持

4.多个用户同时打开客户端/同时注册/同时登录等情况下,不同客户服务线程对全局存在的用户列表和用户数据库等公共资源,进行同时增/删/改/查等读写操作时,彼此竞争临界资源的协调问题
解决办法：
	分别向users链表和chat.db的所有操作函数(创建函数除外)，添加读写锁。读锁互通，但写锁与读锁、写锁与写锁互斥。

5.在公网通信的问题 
经过在阿里云上开设linux服务器实测，确定此软件不存在公网不能通信的问题。之所以在个人电脑上运行的时候 外部不能访问 是因为本机IP属于局域网网关自动分配的局域网内的局部地址，外部网络可以通过ip地址直接访问网关 但不能直接访问局域网内的个人ip地址。根据NAT(Network Address Translation)网络地址转换协议，局域网内的计算机可以直接访问internet公网上的所有ip，但internet上的计算机不能直接访问局域网内的个人局部地址，以减少公网上不必要的ip地址占用。公网和局域网之间的信息交换，由网关负责。


《尚未解决》

客户端界面和友好操作的问题（可选）
本程序主要运行在Unix_like操作系统的terminal上，构想中的主要用户是程序开发者等业内人士，所以不需要界面。
